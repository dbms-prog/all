// Insert multiple documents
db.student.insertMany([
  { Rollno: 1, Name: "John", Class: "TE", Div: "A", Subject: "TOC", Marks: 75, Address: { city: "Pune" } },
  { Rollno: 2, Name: "Emma", Class: "TE", Div: "A", Subject: "DBMS", Marks: 65, Address: { city: "Mumbai" } },
  { Rollno: 3, Name: "Aman", Class: "TE", Div: "B", Subject: "SPOS", Marks: 80, Address: { city: "Pune" } },
  { Rollno: 4, Name: "Sara", Class: "TE", Div: "B", Subject: "DBMS", Marks: 55, Address: { city: "Nashik" } },
  { Rollno: 5, Name: "Maya", Class: "TE", Div: "A", Subject: "TOC", Marks: 85, Address: { city: "Pune" } },
  { Rollno: 6, Name: "Raj", Class: "TE", Div: "B", Subject: "SPOS", Marks: 90, Address: { city: "Pune" } },
  { Rollno: 7, Name: "Sia", Class: "TE", Div: "B", Subject: "DBMS", Marks: 45, Address: { city: "Mumbai" } }
]);

// 1. Find the average of total marks in TOC
db.student.aggregate([
  { $match: { Subject: "TOC" } },
  { $group: { _id: "$Subject", averageMarks: { $avg: "$Marks" } } }
]);

// 2. Find the number of students division-wise
db.student.aggregate([
  { $group: { _id: "$Div", count: { $sum: 1 } } }
]);

// 3. Find students of division B who scored minimum marks in DBMS
db.student.aggregate([
  { $match: { Div: "B", Subject: "DBMS" } },
  { $group: { _id: "$Div", minMarks: { $min: "$Marks" }, students: { $push: "$Name" } } }
]);

// 4. Find the total sum of marks in SPOS of students staying in Pune
db.student.aggregate([
  { $match: { Subject: "SPOS", "Address.city": "Pune" } },
  { $group: { _id: null, totalMarks: { $sum: "$Marks" } } }
]);

// 5. Find the division-wise count of students who have DBMS as their subject
db.student.aggregate([
  { $match: { Subject: "DBMS" } },
  { $group: { _id: "$Div", count: { $sum: 1 } } }
]);

// 6. Find the count of each city
db.student.aggregate([
  { $group: { _id: "$Address.city", count: { $sum: 1 } } }
]);

// Create a simple index on the Rollno field
db.student.createIndex({ Rollno: 1 });

// Create a simple index on the Name field
db.student.createIndex({ Name: 1 });

// Create a compound index on Class and Marks
db.student.createIndex({ Class: 1, Marks: -1 });
